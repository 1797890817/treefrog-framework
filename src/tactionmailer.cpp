/* Copyright (c) 2011-2012, AOYAMA Kazuharu
 * All rights reserved.
 *
 * This software may be used and distributed according to the terms of
 * the New BSD License, which is incorporated herein by reference.
 */

#include <TActionMailer>
#include <TWebApplication>
#include <TDispatcher>
#include <TActionView>
#include <TMailMessage>
#include <TSmtpMailer>

#define CONTROLLER_NAME "mailer"
#define ACTIONE_NAME    "mail"

/*!
  \class TActionMailer
  \brief The TActionMailer class provides a mail client on action controller.
*/

/*!
  Constructor.
*/
TActionMailer::TActionMailer()
    : TAbstractController()
{ }

/*!
  Returns the controller name, "mailer".
*/
QString TActionMailer::name() const
{
    return CONTROLLER_NAME;
}

/*!
  Returns a active action name, "mail".
*/
QString TActionMailer::activeAction() const
{
    return ACTIONE_NAME;
}

/*!
  Delivers an email generated by setting variables to the specified template.
*/
bool TActionMailer::deliver(const QString &templateName)
{
    // Creates the view-object
    TDispatcher<TActionView> viewDispatcher(viewClassName(CONTROLLER_NAME, templateName));
    TActionView *view = viewDispatcher.object();
    if (!view)
        return false;
    
    view->setVariantMap(allVariants());
    QString msg = view->toString();
    if (msg.isEmpty()) {
        tSystemError("Mail Message Empty: template name:%s", qPrintable(templateName));
        return false;
    }

    const QSettings &sets = Tf::app()->appSettings();
    TMailMessage mail(msg, sets.value("ActionMailer.CharacterSet", "UTF-8").toByteArray());
    
    // Sets SMTP settings
    QByteArray dm = sets.value("ActionMailer.DeliveryMethod").toByteArray().toLower();
    if (dm == "smtp") {
        TSmtpMailer *mailer = new TSmtpMailer;
        mailer->setHostName(sets.value("ActionMailer.smtp.HostName").toByteArray());
        mailer->setPort(sets.value("ActionMailer.smtp.Port").toUInt());
        mailer->setAuthenticationEnabled(sets.value("ActionMailer.smtp.Authentication").toBool());
        mailer->setUserName(sets.value("ActionMailer.smtp.UserName").toByteArray());
        mailer->setPassword(sets.value("ActionMailer.smtp.Password").toByteArray());
        tSystemDebug("%s", mail.toByteArray().data());

        // Sends email
        bool delay = sets.value("ActionMailer.smtp.DelayedDelivery", false).toBool();
        if (delay) {
            mailer->sendLater(mail);
        } else {
            mailer->send(mail);
            mailer->deleteLater();
        }
    } else if (dm == "sendmail") {
        // TODO

    } else if (dm.isEmpty()) {
        // not send
    } else {
        // Bad parameter
        tSystemError("SMTP: Bad Parameter: ActionMailer.DeliveryMethod: %s", dm.data());
        return false;
    }
    return true;
}
