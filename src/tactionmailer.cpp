/* Copyright (c) 2011-2013, AOYAMA Kazuharu
 * All rights reserved.
 *
 * This software may be used and distributed according to the terms of
 * the New BSD License, which is incorporated herein by reference.
 */

#include <TActionMailer>
#include <TWebApplication>
#include <TDispatcher>
#include <TActionView>
#include <TMailMessage>
#include <TSmtpMailer>
#include <TSendmailMailer>
#include <QProcess>

#define CONTROLLER_NAME "mailer"
#define ACTIONE_NAME    "mail"
#define PREFIX_SMTP     "ActionMailer.smtp."

/*!
  \class TActionMailer
  \brief The TActionMailer class provides a mail client on action controller.
*/

/*!
  Constructor.
*/
TActionMailer::TActionMailer()
    : TAbstractController()
{ }

/*!
  Returns the controller name, "mailer".
*/
QString TActionMailer::name() const
{
    return CONTROLLER_NAME;
}

/*!
  Returns a active action name, "mail".
*/
QString TActionMailer::activeAction() const
{
    return ACTIONE_NAME;
}

/*!
  Delivers an email generated by setting variables to the specified template.
*/
bool TActionMailer::deliver(const QString &templateName)
{
    // Creates the view-object
    TDispatcher<TActionView> viewDispatcher(viewClassName(CONTROLLER_NAME, templateName));
    TActionView *view = viewDispatcher.object();
    if (!view) {
        tSystemError("no such template : %s", qPrintable(templateName));
        return false;
    }

    view->setVariantMap(allVariants());
    QString msg = view->toString();
    if (msg.isEmpty()) {
        tSystemError("Mail Message Empty: template name:%s", qPrintable(templateName));
        return false;
    }

    const QSettings &sets = Tf::app()->appSettings();
    TMailMessage mail(msg, sets.value("ActionMailer.CharacterSet", "UTF-8").toByteArray());

    // Sets SMTP settings
    bool delay = sets.value("ActionMailer.DelayedDelivery").toBool();

    QByteArray dm = sets.value("ActionMailer.DeliveryMethod").toByteArray().toLower();
    if (dm == "smtp") {
        // SMTP
        TSmtpMailer *mailer = new TSmtpMailer;
        mailer->setHostName(sets.value(PREFIX_SMTP "HostName").toByteArray());
        mailer->setPort(sets.value(PREFIX_SMTP "Port").toUInt());
        mailer->setAuthenticationEnabled(sets.value(PREFIX_SMTP "Authentication").toBool());
        mailer->setUserName(sets.value(PREFIX_SMTP "UserName").toByteArray());
        mailer->setPassword(sets.value(PREFIX_SMTP "Password").toByteArray());
        tSystemDebug("%s", mail.toByteArray().data());

        // POP before SMTP
        if ( sets.value(PREFIX_SMTP "EnablePopBeforeSmtp", false).toBool() ) {
            QByteArray popSvr = sets.value(PREFIX_SMTP "PopServer.HostName").toByteArray();
            quint16 popPort = sets.value(PREFIX_SMTP "PopServer.Port").toInt();
            bool apop = sets.value(PREFIX_SMTP "PopServer.EnableApop", false).toBool();

            mailer->setPopBeforeSmtpAuthEnabled(popSvr, popPort, apop, true);
        }

        if (sets.contains(PREFIX_SMTP "DelayedDelivery")) {
            delay = sets.value(PREFIX_SMTP "DelayedDelivery").toBool();
        }

        // Sends email
        if (delay) {
            mailer->sendLater(mail);
        } else {
            mailer->send(mail);
            mailer->deleteLater();
        }

    } else if (dm == "sendmail") {
        // Command location of 'sendmail'
        QString cmd = Tf::app()->appSettings().value("ActionMailer.sendmail.CommandLocation").toString().trimmed();
        if (cmd.isEmpty()) {
            cmd = Tf::app()->appSettings().value("ActionMailer.sendMail.CommandLocation").toString().trimmed();
        }

        if (!cmd.isEmpty()) {
            TSendmailMailer *mailer = new TSendmailMailer(cmd);
            QByteArray rawmail = mail.toByteArray();
            QList<QByteArray> recipients = mail.recipients();

            if (delay) {
                mailer->sendLater(mail);
            } else {
                mailer->send(mail);
                mailer->deleteLater();
            }
        }

    } else if (dm.isEmpty()) {
        // not send
    } else {
        // Bad parameter
        tSystemError("SMTP: Bad Parameter: ActionMailer.DeliveryMethod: %s", dm.data());
        return false;
    }
    return true;
}
